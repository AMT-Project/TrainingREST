openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to demonstrate Swagger and Spring Boot
security:
  #  - bearerAuth: []
  - apiKeyAuth: [ ]
paths:
  /applications:
    post:
      description: register an application
      operationId: registerApplication
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ApplicationRegistration'
      responses:
        '201':
          description: created
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
    get:
      description: get the list of all badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
  /pointScales:
    post:
      description: create a point scale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: created
    get:
      description: get the list of all pointScale
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScale'
  /pointScales/{id}:
    get:
      description: get one point scale, by id
      operationId: getPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScale'
  /events:
    post:
      description: create an event
      operationId: createEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: created
  /users:
    get:
      description: get the list of all users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      description: get one user, by id
      operationId: getUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
  /users/{appUserId}/badges:
    get:
      description: get badges earned by a user
      operationId: getUserBadges
      parameters:
        - in: path
          name: appUserId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /users/{appUserId}/scores:
    get:
      description: get score of user on every point scales he has points on
      operationId: getPointScalesScores
      parameters:
        - in: path
          name: appUserId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScalesScores'
  /rules:
    post:
      description: create a rule
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created
  /leaderboards/{pointScale}:
    get:
      description: Get the leaderboard for the given point scale
      operationId: getLeaderboard
      parameters:
        - in: path
          name: pointScale
          schema:
            type: string
          required: true
          description: Name of the point scale in the application
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of users to return in the leaderboard
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntry'
components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Application:
      type: object
      properties:
        name:
          type: string
        apiKey:
          type: string
    ApplicationRegistration:
      type: object
      properties:
        name:
          type: string
    Badge:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    PointScale:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Event:
      type: object
      properties:
        appUserId:
          type: string
        timestamp:
          type: string
          format: date-time
        eventType:
          type: string
    User:
      type: object
      properties:
        appUserId:
          type: string
        nbBadges:
          type: integer
    Rule:
      type: object
      properties:
        name:
          type: string
        if:
          type: object
          properties:
            eventType:
              type: string
        then:
          type: object
          properties:
            awardBadge:
              type: string
            awardPoints:
              type: object
              properties:
                pointScale:
                  type: string
                amount:
                  type: integer
                amountToGet:
                  type: integer
    LeaderboardEntry:
      type: object
      properties:
        appUserId:
          type: string
        pointsSum:
          type: integer
    PointScalesScores:
      type: object
      properties:
        pointScale:
          type: string
        score:
          type: integer